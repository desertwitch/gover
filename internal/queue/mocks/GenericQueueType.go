// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	queue "github.com/desertwitch/gover/internal/queue"
	mock "github.com/stretchr/testify/mock"
)

// GenericQueueType is an autogenerated mock type for the GenericQueueType type
type GenericQueueType[E comparable] struct {
	mock.Mock
}

type GenericQueueType_Expecter[E comparable] struct {
	mock *mock.Mock
}

func (_m *GenericQueueType[E]) EXPECT() *GenericQueueType_Expecter[E] {
	return &GenericQueueType_Expecter[E]{mock: &_m.Mock}
}

// Enqueue provides a mock function with given fields: items
func (_m *GenericQueueType[E]) Enqueue(items ...E) {
	_va := make([]interface{}, len(items))
	for _i := range items {
		_va[_i] = items[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// GenericQueueType_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type GenericQueueType_Enqueue_Call[E comparable] struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - items ...E
func (_e *GenericQueueType_Expecter[E]) Enqueue(items ...interface{}) *GenericQueueType_Enqueue_Call[E] {
	return &GenericQueueType_Enqueue_Call[E]{Call: _e.mock.On("Enqueue",
		append([]interface{}{}, items...)...)}
}

func (_c *GenericQueueType_Enqueue_Call[E]) Run(run func(items ...E)) *GenericQueueType_Enqueue_Call[E] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]E, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(E)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GenericQueueType_Enqueue_Call[E]) Return() *GenericQueueType_Enqueue_Call[E] {
	_c.Call.Return()
	return _c
}

func (_c *GenericQueueType_Enqueue_Call[E]) RunAndReturn(run func(...E)) *GenericQueueType_Enqueue_Call[E] {
	_c.Run(run)
	return _c
}

// GetSuccessful provides a mock function with no fields
func (_m *GenericQueueType[E]) GetSuccessful() []E {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSuccessful")
	}

	var r0 []E
	if rf, ok := ret.Get(0).(func() []E); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]E)
		}
	}

	return r0
}

// GenericQueueType_GetSuccessful_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuccessful'
type GenericQueueType_GetSuccessful_Call[E comparable] struct {
	*mock.Call
}

// GetSuccessful is a helper method to define mock.On call
func (_e *GenericQueueType_Expecter[E]) GetSuccessful() *GenericQueueType_GetSuccessful_Call[E] {
	return &GenericQueueType_GetSuccessful_Call[E]{Call: _e.mock.On("GetSuccessful")}
}

func (_c *GenericQueueType_GetSuccessful_Call[E]) Run(run func()) *GenericQueueType_GetSuccessful_Call[E] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericQueueType_GetSuccessful_Call[E]) Return(_a0 []E) *GenericQueueType_GetSuccessful_Call[E] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericQueueType_GetSuccessful_Call[E]) RunAndReturn(run func() []E) *GenericQueueType_GetSuccessful_Call[E] {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function with no fields
func (_m *GenericQueueType[E]) Progress() queue.Progress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 queue.Progress
	if rf, ok := ret.Get(0).(func() queue.Progress); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(queue.Progress)
	}

	return r0
}

// GenericQueueType_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type GenericQueueType_Progress_Call[E comparable] struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
func (_e *GenericQueueType_Expecter[E]) Progress() *GenericQueueType_Progress_Call[E] {
	return &GenericQueueType_Progress_Call[E]{Call: _e.mock.On("Progress")}
}

func (_c *GenericQueueType_Progress_Call[E]) Run(run func()) *GenericQueueType_Progress_Call[E] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenericQueueType_Progress_Call[E]) Return(_a0 queue.Progress) *GenericQueueType_Progress_Call[E] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenericQueueType_Progress_Call[E]) RunAndReturn(run func() queue.Progress) *GenericQueueType_Progress_Call[E] {
	_c.Call.Return(run)
	return _c
}

// NewGenericQueueType creates a new instance of GenericQueueType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericQueueType[E comparable](t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericQueueType[E] {
	mock := &GenericQueueType[E]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
