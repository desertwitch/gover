// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	filesystem "github.com/desertwitch/gover/internal/filesystem"
	mock "github.com/stretchr/testify/mock"
)

// ShareType is an autogenerated mock type for the ShareType type
type ShareType struct {
	mock.Mock
}

type ShareType_Expecter struct {
	mock *mock.Mock
}

func (_m *ShareType) EXPECT() *ShareType_Expecter {
	return &ShareType_Expecter{mock: &_m.Mock}
}

// GetAllocator provides a mock function with no fields
func (_m *ShareType) GetAllocator() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllocator")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ShareType_GetAllocator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllocator'
type ShareType_GetAllocator_Call struct {
	*mock.Call
}

// GetAllocator is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetAllocator() *ShareType_GetAllocator_Call {
	return &ShareType_GetAllocator_Call{Call: _e.mock.On("GetAllocator")}
}

func (_c *ShareType_GetAllocator_Call) Run(run func()) *ShareType_GetAllocator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetAllocator_Call) Return(_a0 string) *ShareType_GetAllocator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetAllocator_Call) RunAndReturn(run func() string) *ShareType_GetAllocator_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachePool provides a mock function with no fields
func (_m *ShareType) GetCachePool() filesystem.PoolType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCachePool")
	}

	var r0 filesystem.PoolType
	if rf, ok := ret.Get(0).(func() filesystem.PoolType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.PoolType)
		}
	}

	return r0
}

// ShareType_GetCachePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachePool'
type ShareType_GetCachePool_Call struct {
	*mock.Call
}

// GetCachePool is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetCachePool() *ShareType_GetCachePool_Call {
	return &ShareType_GetCachePool_Call{Call: _e.mock.On("GetCachePool")}
}

func (_c *ShareType_GetCachePool_Call) Run(run func()) *ShareType_GetCachePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetCachePool_Call) Return(_a0 filesystem.PoolType) *ShareType_GetCachePool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetCachePool_Call) RunAndReturn(run func() filesystem.PoolType) *ShareType_GetCachePool_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachePool2 provides a mock function with no fields
func (_m *ShareType) GetCachePool2() filesystem.PoolType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCachePool2")
	}

	var r0 filesystem.PoolType
	if rf, ok := ret.Get(0).(func() filesystem.PoolType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.PoolType)
		}
	}

	return r0
}

// ShareType_GetCachePool2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachePool2'
type ShareType_GetCachePool2_Call struct {
	*mock.Call
}

// GetCachePool2 is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetCachePool2() *ShareType_GetCachePool2_Call {
	return &ShareType_GetCachePool2_Call{Call: _e.mock.On("GetCachePool2")}
}

func (_c *ShareType_GetCachePool2_Call) Run(run func()) *ShareType_GetCachePool2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetCachePool2_Call) Return(_a0 filesystem.PoolType) *ShareType_GetCachePool2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetCachePool2_Call) RunAndReturn(run func() filesystem.PoolType) *ShareType_GetCachePool2_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisableCOW provides a mock function with no fields
func (_m *ShareType) GetDisableCOW() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisableCOW")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ShareType_GetDisableCOW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisableCOW'
type ShareType_GetDisableCOW_Call struct {
	*mock.Call
}

// GetDisableCOW is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetDisableCOW() *ShareType_GetDisableCOW_Call {
	return &ShareType_GetDisableCOW_Call{Call: _e.mock.On("GetDisableCOW")}
}

func (_c *ShareType_GetDisableCOW_Call) Run(run func()) *ShareType_GetDisableCOW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetDisableCOW_Call) Return(_a0 bool) *ShareType_GetDisableCOW_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetDisableCOW_Call) RunAndReturn(run func() bool) *ShareType_GetDisableCOW_Call {
	_c.Call.Return(run)
	return _c
}

// GetExcludedDisks provides a mock function with no fields
func (_m *ShareType) GetExcludedDisks() map[string]filesystem.DiskType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExcludedDisks")
	}

	var r0 map[string]filesystem.DiskType
	if rf, ok := ret.Get(0).(func() map[string]filesystem.DiskType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]filesystem.DiskType)
		}
	}

	return r0
}

// ShareType_GetExcludedDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExcludedDisks'
type ShareType_GetExcludedDisks_Call struct {
	*mock.Call
}

// GetExcludedDisks is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetExcludedDisks() *ShareType_GetExcludedDisks_Call {
	return &ShareType_GetExcludedDisks_Call{Call: _e.mock.On("GetExcludedDisks")}
}

func (_c *ShareType_GetExcludedDisks_Call) Run(run func()) *ShareType_GetExcludedDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetExcludedDisks_Call) Return(_a0 map[string]filesystem.DiskType) *ShareType_GetExcludedDisks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetExcludedDisks_Call) RunAndReturn(run func() map[string]filesystem.DiskType) *ShareType_GetExcludedDisks_Call {
	_c.Call.Return(run)
	return _c
}

// GetIncludedDisks provides a mock function with no fields
func (_m *ShareType) GetIncludedDisks() map[string]filesystem.DiskType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIncludedDisks")
	}

	var r0 map[string]filesystem.DiskType
	if rf, ok := ret.Get(0).(func() map[string]filesystem.DiskType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]filesystem.DiskType)
		}
	}

	return r0
}

// ShareType_GetIncludedDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIncludedDisks'
type ShareType_GetIncludedDisks_Call struct {
	*mock.Call
}

// GetIncludedDisks is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetIncludedDisks() *ShareType_GetIncludedDisks_Call {
	return &ShareType_GetIncludedDisks_Call{Call: _e.mock.On("GetIncludedDisks")}
}

func (_c *ShareType_GetIncludedDisks_Call) Run(run func()) *ShareType_GetIncludedDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetIncludedDisks_Call) Return(_a0 map[string]filesystem.DiskType) *ShareType_GetIncludedDisks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetIncludedDisks_Call) RunAndReturn(run func() map[string]filesystem.DiskType) *ShareType_GetIncludedDisks_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *ShareType) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ShareType_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ShareType_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetName() *ShareType_GetName_Call {
	return &ShareType_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ShareType_GetName_Call) Run(run func()) *ShareType_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetName_Call) Return(_a0 string) *ShareType_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetName_Call) RunAndReturn(run func() string) *ShareType_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpaceFloor provides a mock function with no fields
func (_m *ShareType) GetSpaceFloor() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpaceFloor")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ShareType_GetSpaceFloor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpaceFloor'
type ShareType_GetSpaceFloor_Call struct {
	*mock.Call
}

// GetSpaceFloor is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetSpaceFloor() *ShareType_GetSpaceFloor_Call {
	return &ShareType_GetSpaceFloor_Call{Call: _e.mock.On("GetSpaceFloor")}
}

func (_c *ShareType_GetSpaceFloor_Call) Run(run func()) *ShareType_GetSpaceFloor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetSpaceFloor_Call) Return(_a0 uint64) *ShareType_GetSpaceFloor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetSpaceFloor_Call) RunAndReturn(run func() uint64) *ShareType_GetSpaceFloor_Call {
	_c.Call.Return(run)
	return _c
}

// GetSplitLevel provides a mock function with no fields
func (_m *ShareType) GetSplitLevel() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSplitLevel")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ShareType_GetSplitLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSplitLevel'
type ShareType_GetSplitLevel_Call struct {
	*mock.Call
}

// GetSplitLevel is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetSplitLevel() *ShareType_GetSplitLevel_Call {
	return &ShareType_GetSplitLevel_Call{Call: _e.mock.On("GetSplitLevel")}
}

func (_c *ShareType_GetSplitLevel_Call) Run(run func()) *ShareType_GetSplitLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetSplitLevel_Call) Return(_a0 int) *ShareType_GetSplitLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetSplitLevel_Call) RunAndReturn(run func() int) *ShareType_GetSplitLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetUseCache provides a mock function with no fields
func (_m *ShareType) GetUseCache() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUseCache")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ShareType_GetUseCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUseCache'
type ShareType_GetUseCache_Call struct {
	*mock.Call
}

// GetUseCache is a helper method to define mock.On call
func (_e *ShareType_Expecter) GetUseCache() *ShareType_GetUseCache_Call {
	return &ShareType_GetUseCache_Call{Call: _e.mock.On("GetUseCache")}
}

func (_c *ShareType_GetUseCache_Call) Run(run func()) *ShareType_GetUseCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ShareType_GetUseCache_Call) Return(_a0 string) *ShareType_GetUseCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShareType_GetUseCache_Call) RunAndReturn(run func() string) *ShareType_GetUseCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewShareType creates a new instance of ShareType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShareType(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShareType {
	mock := &ShareType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
