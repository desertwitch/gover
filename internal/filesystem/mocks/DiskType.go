// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DiskType is an autogenerated mock type for the DiskType type
type DiskType struct {
	mock.Mock
}

type DiskType_Expecter struct {
	mock *mock.Mock
}

func (_m *DiskType) EXPECT() *DiskType_Expecter {
	return &DiskType_Expecter{mock: &_m.Mock}
}

// GetFSPath provides a mock function with no fields
func (_m *DiskType) GetFSPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFSPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DiskType_GetFSPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFSPath'
type DiskType_GetFSPath_Call struct {
	*mock.Call
}

// GetFSPath is a helper method to define mock.On call
func (_e *DiskType_Expecter) GetFSPath() *DiskType_GetFSPath_Call {
	return &DiskType_GetFSPath_Call{Call: _e.mock.On("GetFSPath")}
}

func (_c *DiskType_GetFSPath_Call) Run(run func()) *DiskType_GetFSPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiskType_GetFSPath_Call) Return(_a0 string) *DiskType_GetFSPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiskType_GetFSPath_Call) RunAndReturn(run func() string) *DiskType_GetFSPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *DiskType) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DiskType_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type DiskType_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *DiskType_Expecter) GetName() *DiskType_GetName_Call {
	return &DiskType_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *DiskType_GetName_Call) Run(run func()) *DiskType_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiskType_GetName_Call) Return(_a0 string) *DiskType_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiskType_GetName_Call) RunAndReturn(run func() string) *DiskType_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// IsDisk provides a mock function with no fields
func (_m *DiskType) IsDisk() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDisk")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DiskType_IsDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDisk'
type DiskType_IsDisk_Call struct {
	*mock.Call
}

// IsDisk is a helper method to define mock.On call
func (_e *DiskType_Expecter) IsDisk() *DiskType_IsDisk_Call {
	return &DiskType_IsDisk_Call{Call: _e.mock.On("IsDisk")}
}

func (_c *DiskType_IsDisk_Call) Run(run func()) *DiskType_IsDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiskType_IsDisk_Call) Return(_a0 bool) *DiskType_IsDisk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiskType_IsDisk_Call) RunAndReturn(run func() bool) *DiskType_IsDisk_Call {
	_c.Call.Return(run)
	return _c
}

// NewDiskType creates a new instance of DiskType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiskType(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiskType {
	mock := &DiskType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
