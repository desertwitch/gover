// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	filesystem "github.com/desertwitch/gover/internal/filesystem"
	mock "github.com/stretchr/testify/mock"
)

// SystemType is an autogenerated mock type for the SystemType type
type SystemType struct {
	mock.Mock
}

type SystemType_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemType) EXPECT() *SystemType_Expecter {
	return &SystemType_Expecter{mock: &_m.Mock}
}

// GetArray provides a mock function with no fields
func (_m *SystemType) GetArray() filesystem.ArrayType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArray")
	}

	var r0 filesystem.ArrayType
	if rf, ok := ret.Get(0).(func() filesystem.ArrayType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.ArrayType)
		}
	}

	return r0
}

// SystemType_GetArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArray'
type SystemType_GetArray_Call struct {
	*mock.Call
}

// GetArray is a helper method to define mock.On call
func (_e *SystemType_Expecter) GetArray() *SystemType_GetArray_Call {
	return &SystemType_GetArray_Call{Call: _e.mock.On("GetArray")}
}

func (_c *SystemType_GetArray_Call) Run(run func()) *SystemType_GetArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SystemType_GetArray_Call) Return(_a0 filesystem.ArrayType) *SystemType_GetArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemType_GetArray_Call) RunAndReturn(run func() filesystem.ArrayType) *SystemType_GetArray_Call {
	_c.Call.Return(run)
	return _c
}

// GetShares provides a mock function with no fields
func (_m *SystemType) GetShares() map[string]filesystem.ShareType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShares")
	}

	var r0 map[string]filesystem.ShareType
	if rf, ok := ret.Get(0).(func() map[string]filesystem.ShareType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]filesystem.ShareType)
		}
	}

	return r0
}

// SystemType_GetShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShares'
type SystemType_GetShares_Call struct {
	*mock.Call
}

// GetShares is a helper method to define mock.On call
func (_e *SystemType_Expecter) GetShares() *SystemType_GetShares_Call {
	return &SystemType_GetShares_Call{Call: _e.mock.On("GetShares")}
}

func (_c *SystemType_GetShares_Call) Run(run func()) *SystemType_GetShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SystemType_GetShares_Call) Return(_a0 map[string]filesystem.ShareType) *SystemType_GetShares_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemType_GetShares_Call) RunAndReturn(run func() map[string]filesystem.ShareType) *SystemType_GetShares_Call {
	_c.Call.Return(run)
	return _c
}

// NewSystemType creates a new instance of SystemType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemType(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemType {
	mock := &SystemType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
