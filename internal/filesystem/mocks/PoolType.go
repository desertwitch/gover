// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PoolType is an autogenerated mock type for the PoolType type
type PoolType struct {
	mock.Mock
}

type PoolType_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolType) EXPECT() *PoolType_Expecter {
	return &PoolType_Expecter{mock: &_m.Mock}
}

// GetFSPath provides a mock function with no fields
func (_m *PoolType) GetFSPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFSPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PoolType_GetFSPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFSPath'
type PoolType_GetFSPath_Call struct {
	*mock.Call
}

// GetFSPath is a helper method to define mock.On call
func (_e *PoolType_Expecter) GetFSPath() *PoolType_GetFSPath_Call {
	return &PoolType_GetFSPath_Call{Call: _e.mock.On("GetFSPath")}
}

func (_c *PoolType_GetFSPath_Call) Run(run func()) *PoolType_GetFSPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolType_GetFSPath_Call) Return(_a0 string) *PoolType_GetFSPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolType_GetFSPath_Call) RunAndReturn(run func() string) *PoolType_GetFSPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *PoolType) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PoolType_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type PoolType_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *PoolType_Expecter) GetName() *PoolType_GetName_Call {
	return &PoolType_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *PoolType_GetName_Call) Run(run func()) *PoolType_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolType_GetName_Call) Return(_a0 string) *PoolType_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolType_GetName_Call) RunAndReturn(run func() string) *PoolType_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// IsPool provides a mock function with no fields
func (_m *PoolType) IsPool() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PoolType_IsPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPool'
type PoolType_IsPool_Call struct {
	*mock.Call
}

// IsPool is a helper method to define mock.On call
func (_e *PoolType_Expecter) IsPool() *PoolType_IsPool_Call {
	return &PoolType_IsPool_Call{Call: _e.mock.On("IsPool")}
}

func (_c *PoolType_IsPool_Call) Run(run func()) *PoolType_IsPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolType_IsPool_Call) Return(_a0 bool) *PoolType_IsPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolType_IsPool_Call) RunAndReturn(run func() bool) *PoolType_IsPool_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoolType creates a new instance of PoolType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolType(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolType {
	mock := &PoolType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
