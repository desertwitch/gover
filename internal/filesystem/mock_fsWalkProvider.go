// Code generated by mockery. DO NOT EDIT.

package filesystem

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// mockFsWalkProvider is an autogenerated mock type for the fsWalkProvider type
type mockFsWalkProvider struct {
	mock.Mock
}

type mockFsWalkProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFsWalkProvider) EXPECT() *mockFsWalkProvider_Expecter {
	return &mockFsWalkProvider_Expecter{mock: &_m.Mock}
}

// WalkDir provides a mock function with given fields: root, fn
func (_m *mockFsWalkProvider) WalkDir(root string, fn fs.WalkDirFunc) error {
	ret := _m.Called(root, fn)

	if len(ret) == 0 {
		panic("no return value specified for WalkDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fs.WalkDirFunc) error); ok {
		r0 = rf(root, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockFsWalkProvider_WalkDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkDir'
type mockFsWalkProvider_WalkDir_Call struct {
	*mock.Call
}

// WalkDir is a helper method to define mock.On call
//   - root string
//   - fn fs.WalkDirFunc
func (_e *mockFsWalkProvider_Expecter) WalkDir(root interface{}, fn interface{}) *mockFsWalkProvider_WalkDir_Call {
	return &mockFsWalkProvider_WalkDir_Call{Call: _e.mock.On("WalkDir", root, fn)}
}

func (_c *mockFsWalkProvider_WalkDir_Call) Run(run func(root string, fn fs.WalkDirFunc)) *mockFsWalkProvider_WalkDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fs.WalkDirFunc))
	})
	return _c
}

func (_c *mockFsWalkProvider_WalkDir_Call) Return(_a0 error) *mockFsWalkProvider_WalkDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFsWalkProvider_WalkDir_Call) RunAndReturn(run func(string, fs.WalkDirFunc) error) *mockFsWalkProvider_WalkDir_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFsWalkProvider creates a new instance of mockFsWalkProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFsWalkProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFsWalkProvider {
	mock := &mockFsWalkProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
