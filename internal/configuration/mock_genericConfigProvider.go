// Code generated by mockery. DO NOT EDIT.

package configuration

import mock "github.com/stretchr/testify/mock"

// mockGenericConfigProvider is an autogenerated mock type for the genericConfigProvider type
type mockGenericConfigProvider struct {
	mock.Mock
}

type mockGenericConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGenericConfigProvider) EXPECT() *mockGenericConfigProvider_Expecter {
	return &mockGenericConfigProvider_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: filenames
func (_m *mockGenericConfigProvider) Read(filenames ...string) (map[string]string, error) {
	_va := make([]interface{}, len(filenames))
	for _i := range filenames {
		_va[_i] = filenames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (map[string]string, error)); ok {
		return rf(filenames...)
	}
	if rf, ok := ret.Get(0).(func(...string) map[string]string); ok {
		r0 = rf(filenames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(filenames...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGenericConfigProvider_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type mockGenericConfigProvider_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - filenames ...string
func (_e *mockGenericConfigProvider_Expecter) Read(filenames ...interface{}) *mockGenericConfigProvider_Read_Call {
	return &mockGenericConfigProvider_Read_Call{Call: _e.mock.On("Read",
		append([]interface{}{}, filenames...)...)}
}

func (_c *mockGenericConfigProvider_Read_Call) Run(run func(filenames ...string)) *mockGenericConfigProvider_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *mockGenericConfigProvider_Read_Call) Return(envMap map[string]string, err error) *mockGenericConfigProvider_Read_Call {
	_c.Call.Return(envMap, err)
	return _c
}

func (_c *mockGenericConfigProvider_Read_Call) RunAndReturn(run func(...string) (map[string]string, error)) *mockGenericConfigProvider_Read_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGenericConfigProvider creates a new instance of mockGenericConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGenericConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGenericConfigProvider {
	mock := &mockGenericConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
