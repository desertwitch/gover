// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ConfigProvider is an autogenerated mock type for the configProvider type
type ConfigProvider struct {
	mock.Mock
}

type ConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigProvider) EXPECT() *ConfigProvider_Expecter {
	return &ConfigProvider_Expecter{mock: &_m.Mock}
}

// MapKeyToInt provides a mock function with given fields: envMap, key
func (_m *ConfigProvider) MapKeyToInt(envMap map[string]string, key string) int {
	ret := _m.Called(envMap, key)

	if len(ret) == 0 {
		panic("no return value specified for MapKeyToInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(map[string]string, string) int); ok {
		r0 = rf(envMap, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ConfigProvider_MapKeyToInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapKeyToInt'
type ConfigProvider_MapKeyToInt_Call struct {
	*mock.Call
}

// MapKeyToInt is a helper method to define mock.On call
//   - envMap map[string]string
//   - key string
func (_e *ConfigProvider_Expecter) MapKeyToInt(envMap interface{}, key interface{}) *ConfigProvider_MapKeyToInt_Call {
	return &ConfigProvider_MapKeyToInt_Call{Call: _e.mock.On("MapKeyToInt", envMap, key)}
}

func (_c *ConfigProvider_MapKeyToInt_Call) Run(run func(envMap map[string]string, key string)) *ConfigProvider_MapKeyToInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string), args[1].(string))
	})
	return _c
}

func (_c *ConfigProvider_MapKeyToInt_Call) Return(_a0 int) *ConfigProvider_MapKeyToInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigProvider_MapKeyToInt_Call) RunAndReturn(run func(map[string]string, string) int) *ConfigProvider_MapKeyToInt_Call {
	_c.Call.Return(run)
	return _c
}

// MapKeyToInt64 provides a mock function with given fields: envMap, key
func (_m *ConfigProvider) MapKeyToInt64(envMap map[string]string, key string) int64 {
	ret := _m.Called(envMap, key)

	if len(ret) == 0 {
		panic("no return value specified for MapKeyToInt64")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(map[string]string, string) int64); ok {
		r0 = rf(envMap, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ConfigProvider_MapKeyToInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapKeyToInt64'
type ConfigProvider_MapKeyToInt64_Call struct {
	*mock.Call
}

// MapKeyToInt64 is a helper method to define mock.On call
//   - envMap map[string]string
//   - key string
func (_e *ConfigProvider_Expecter) MapKeyToInt64(envMap interface{}, key interface{}) *ConfigProvider_MapKeyToInt64_Call {
	return &ConfigProvider_MapKeyToInt64_Call{Call: _e.mock.On("MapKeyToInt64", envMap, key)}
}

func (_c *ConfigProvider_MapKeyToInt64_Call) Run(run func(envMap map[string]string, key string)) *ConfigProvider_MapKeyToInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string), args[1].(string))
	})
	return _c
}

func (_c *ConfigProvider_MapKeyToInt64_Call) Return(_a0 int64) *ConfigProvider_MapKeyToInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigProvider_MapKeyToInt64_Call) RunAndReturn(run func(map[string]string, string) int64) *ConfigProvider_MapKeyToInt64_Call {
	_c.Call.Return(run)
	return _c
}

// MapKeyToString provides a mock function with given fields: envMap, key
func (_m *ConfigProvider) MapKeyToString(envMap map[string]string, key string) string {
	ret := _m.Called(envMap, key)

	if len(ret) == 0 {
		panic("no return value specified for MapKeyToString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]string, string) string); ok {
		r0 = rf(envMap, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConfigProvider_MapKeyToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapKeyToString'
type ConfigProvider_MapKeyToString_Call struct {
	*mock.Call
}

// MapKeyToString is a helper method to define mock.On call
//   - envMap map[string]string
//   - key string
func (_e *ConfigProvider_Expecter) MapKeyToString(envMap interface{}, key interface{}) *ConfigProvider_MapKeyToString_Call {
	return &ConfigProvider_MapKeyToString_Call{Call: _e.mock.On("MapKeyToString", envMap, key)}
}

func (_c *ConfigProvider_MapKeyToString_Call) Run(run func(envMap map[string]string, key string)) *ConfigProvider_MapKeyToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string), args[1].(string))
	})
	return _c
}

func (_c *ConfigProvider_MapKeyToString_Call) Return(_a0 string) *ConfigProvider_MapKeyToString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigProvider_MapKeyToString_Call) RunAndReturn(run func(map[string]string, string) string) *ConfigProvider_MapKeyToString_Call {
	_c.Call.Return(run)
	return _c
}

// ReadGeneric provides a mock function with given fields: filenames
func (_m *ConfigProvider) ReadGeneric(filenames ...string) (map[string]string, error) {
	_va := make([]interface{}, len(filenames))
	for _i := range filenames {
		_va[_i] = filenames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReadGeneric")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (map[string]string, error)); ok {
		return rf(filenames...)
	}
	if rf, ok := ret.Get(0).(func(...string) map[string]string); ok {
		r0 = rf(filenames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(filenames...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigProvider_ReadGeneric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadGeneric'
type ConfigProvider_ReadGeneric_Call struct {
	*mock.Call
}

// ReadGeneric is a helper method to define mock.On call
//   - filenames ...string
func (_e *ConfigProvider_Expecter) ReadGeneric(filenames ...interface{}) *ConfigProvider_ReadGeneric_Call {
	return &ConfigProvider_ReadGeneric_Call{Call: _e.mock.On("ReadGeneric",
		append([]interface{}{}, filenames...)...)}
}

func (_c *ConfigProvider_ReadGeneric_Call) Run(run func(filenames ...string)) *ConfigProvider_ReadGeneric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ConfigProvider_ReadGeneric_Call) Return(envMap map[string]string, err error) *ConfigProvider_ReadGeneric_Call {
	_c.Call.Return(envMap, err)
	return _c
}

func (_c *ConfigProvider_ReadGeneric_Call) RunAndReturn(run func(...string) (map[string]string, error)) *ConfigProvider_ReadGeneric_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigProvider creates a new instance of ConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigProvider {
	mock := &ConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
