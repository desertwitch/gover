// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// FsProvider is an autogenerated mock type for the fsProvider type
type FsProvider struct {
	mock.Mock
}

type FsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FsProvider) EXPECT() *FsProvider_Expecter {
	return &FsProvider_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: path
func (_m *FsProvider) Exists(path string) (bool, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FsProvider_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type FsProvider_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - path string
func (_e *FsProvider_Expecter) Exists(path interface{}) *FsProvider_Exists_Call {
	return &FsProvider_Exists_Call{Call: _e.mock.On("Exists", path)}
}

func (_c *FsProvider_Exists_Call) Run(run func(path string)) *FsProvider_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FsProvider_Exists_Call) Return(_a0 bool, _a1 error) *FsProvider_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FsProvider_Exists_Call) RunAndReturn(run func(string) (bool, error)) *FsProvider_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function with given fields: name
func (_m *FsProvider) ReadDir(name string) ([]os.DirEntry, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []os.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]os.DirEntry, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []os.DirEntry); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FsProvider_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type FsProvider_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - name string
func (_e *FsProvider_Expecter) ReadDir(name interface{}) *FsProvider_ReadDir_Call {
	return &FsProvider_ReadDir_Call{Call: _e.mock.On("ReadDir", name)}
}

func (_c *FsProvider_ReadDir_Call) Run(run func(name string)) *FsProvider_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FsProvider_ReadDir_Call) Return(_a0 []os.DirEntry, _a1 error) *FsProvider_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FsProvider_ReadDir_Call) RunAndReturn(run func(string) ([]os.DirEntry, error)) *FsProvider_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// NewFsProvider creates a new instance of FsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FsProvider {
	mock := &FsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
