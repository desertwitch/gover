// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Storeable is an autogenerated mock type for the Storeable type
type Storeable struct {
	mock.Mock
}

type Storeable_Expecter struct {
	mock *mock.Mock
}

func (_m *Storeable) EXPECT() *Storeable_Expecter {
	return &Storeable_Expecter{mock: &_m.Mock}
}

// GetFSPath provides a mock function with no fields
func (_m *Storeable) GetFSPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFSPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Storeable_GetFSPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFSPath'
type Storeable_GetFSPath_Call struct {
	*mock.Call
}

// GetFSPath is a helper method to define mock.On call
func (_e *Storeable_Expecter) GetFSPath() *Storeable_GetFSPath_Call {
	return &Storeable_GetFSPath_Call{Call: _e.mock.On("GetFSPath")}
}

func (_c *Storeable_GetFSPath_Call) Run(run func()) *Storeable_GetFSPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storeable_GetFSPath_Call) Return(_a0 string) *Storeable_GetFSPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storeable_GetFSPath_Call) RunAndReturn(run func() string) *Storeable_GetFSPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *Storeable) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Storeable_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Storeable_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Storeable_Expecter) GetName() *Storeable_GetName_Call {
	return &Storeable_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Storeable_GetName_Call) Run(run func()) *Storeable_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storeable_GetName_Call) Return(_a0 string) *Storeable_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storeable_GetName_Call) RunAndReturn(run func() string) *Storeable_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// IsActiveTransfer provides a mock function with no fields
func (_m *Storeable) IsActiveTransfer() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsActiveTransfer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Storeable_IsActiveTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActiveTransfer'
type Storeable_IsActiveTransfer_Call struct {
	*mock.Call
}

// IsActiveTransfer is a helper method to define mock.On call
func (_e *Storeable_Expecter) IsActiveTransfer() *Storeable_IsActiveTransfer_Call {
	return &Storeable_IsActiveTransfer_Call{Call: _e.mock.On("IsActiveTransfer")}
}

func (_c *Storeable_IsActiveTransfer_Call) Run(run func()) *Storeable_IsActiveTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storeable_IsActiveTransfer_Call) Return(_a0 bool) *Storeable_IsActiveTransfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storeable_IsActiveTransfer_Call) RunAndReturn(run func() bool) *Storeable_IsActiveTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// SetActiveTransfer provides a mock function with given fields: _a0
func (_m *Storeable) SetActiveTransfer(_a0 bool) {
	_m.Called(_a0)
}

// Storeable_SetActiveTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActiveTransfer'
type Storeable_SetActiveTransfer_Call struct {
	*mock.Call
}

// SetActiveTransfer is a helper method to define mock.On call
//   - _a0 bool
func (_e *Storeable_Expecter) SetActiveTransfer(_a0 interface{}) *Storeable_SetActiveTransfer_Call {
	return &Storeable_SetActiveTransfer_Call{Call: _e.mock.On("SetActiveTransfer", _a0)}
}

func (_c *Storeable_SetActiveTransfer_Call) Run(run func(_a0 bool)) *Storeable_SetActiveTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Storeable_SetActiveTransfer_Call) Return() *Storeable_SetActiveTransfer_Call {
	_c.Call.Return()
	return _c
}

func (_c *Storeable_SetActiveTransfer_Call) RunAndReturn(run func(bool)) *Storeable_SetActiveTransfer_Call {
	_c.Run(run)
	return _c
}

// NewStoreable creates a new instance of Storeable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storeable {
	mock := &Storeable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
