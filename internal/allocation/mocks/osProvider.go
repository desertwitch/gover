// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// OsProvider is an autogenerated mock type for the osProvider type
type OsProvider struct {
	mock.Mock
}

type OsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *OsProvider) EXPECT() *OsProvider_Expecter {
	return &OsProvider_Expecter{mock: &_m.Mock}
}

// Stat provides a mock function with given fields: name
func (_m *OsProvider) Stat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OsProvider_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type OsProvider_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *OsProvider_Expecter) Stat(name interface{}) *OsProvider_Stat_Call {
	return &OsProvider_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *OsProvider_Stat_Call) Run(run func(name string)) *OsProvider_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OsProvider_Stat_Call) Return(_a0 fs.FileInfo, _a1 error) *OsProvider_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OsProvider_Stat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *OsProvider_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewOsProvider creates a new instance of OsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *OsProvider {
	mock := &OsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
