// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	tea "github.com/charmbracelet/bubbletea"
	mock "github.com/stretchr/testify/mock"
)

// TeaProgramProvider is an autogenerated mock type for the teaProgramProvider type
type TeaProgramProvider struct {
	mock.Mock
}

type TeaProgramProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *TeaProgramProvider) EXPECT() *TeaProgramProvider_Expecter {
	return &TeaProgramProvider_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: msg
func (_m *TeaProgramProvider) Send(msg tea.Msg) {
	_m.Called(msg)
}

// TeaProgramProvider_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type TeaProgramProvider_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg tea.Msg
func (_e *TeaProgramProvider_Expecter) Send(msg interface{}) *TeaProgramProvider_Send_Call {
	return &TeaProgramProvider_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *TeaProgramProvider_Send_Call) Run(run func(msg tea.Msg)) *TeaProgramProvider_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tea.Msg))
	})
	return _c
}

func (_c *TeaProgramProvider_Send_Call) Return() *TeaProgramProvider_Send_Call {
	_c.Call.Return()
	return _c
}

func (_c *TeaProgramProvider_Send_Call) RunAndReturn(run func(tea.Msg)) *TeaProgramProvider_Send_Call {
	_c.Run(run)
	return _c
}

// NewTeaProgramProvider creates a new instance of TeaProgramProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeaProgramProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeaProgramProvider {
	mock := &TeaProgramProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
