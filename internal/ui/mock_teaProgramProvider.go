// Code generated by mockery. DO NOT EDIT.

package ui

import (
	tea "github.com/charmbracelet/bubbletea"
	mock "github.com/stretchr/testify/mock"
)

// mockTeaProgramProvider is an autogenerated mock type for the teaProgramProvider type
type mockTeaProgramProvider struct {
	mock.Mock
}

type mockTeaProgramProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTeaProgramProvider) EXPECT() *mockTeaProgramProvider_Expecter {
	return &mockTeaProgramProvider_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: msg
func (_m *mockTeaProgramProvider) Send(msg tea.Msg) {
	_m.Called(msg)
}

// mockTeaProgramProvider_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockTeaProgramProvider_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg tea.Msg
func (_e *mockTeaProgramProvider_Expecter) Send(msg interface{}) *mockTeaProgramProvider_Send_Call {
	return &mockTeaProgramProvider_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *mockTeaProgramProvider_Send_Call) Run(run func(msg tea.Msg)) *mockTeaProgramProvider_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tea.Msg))
	})
	return _c
}

func (_c *mockTeaProgramProvider_Send_Call) Return() *mockTeaProgramProvider_Send_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockTeaProgramProvider_Send_Call) RunAndReturn(run func(tea.Msg)) *mockTeaProgramProvider_Send_Call {
	_c.Run(run)
	return _c
}

// newMockTeaProgramProvider creates a new instance of mockTeaProgramProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTeaProgramProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTeaProgramProvider {
	mock := &mockTeaProgramProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
