// Code generated by mockery. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockBatchProcessor is an autogenerated mock type for the BatchProcessor type
type MockBatchProcessor struct {
	mock.Mock
}

type MockBatchProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBatchProcessor) EXPECT() *MockBatchProcessor_Expecter {
	return &MockBatchProcessor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockBatchProcessor) Execute(_a0 []*Moveable) ([]*Moveable, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []*Moveable
	var r1 bool
	if rf, ok := ret.Get(0).(func([]*Moveable) ([]*Moveable, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]*Moveable) []*Moveable); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Moveable)
		}
	}

	if rf, ok := ret.Get(1).(func([]*Moveable) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockBatchProcessor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockBatchProcessor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 []*Moveable
func (_e *MockBatchProcessor_Expecter) Execute(_a0 interface{}) *MockBatchProcessor_Execute_Call {
	return &MockBatchProcessor_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockBatchProcessor_Execute_Call) Run(run func(_a0 []*Moveable)) *MockBatchProcessor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*Moveable))
	})
	return _c
}

func (_c *MockBatchProcessor_Execute_Call) Return(_a0 []*Moveable, _a1 bool) *MockBatchProcessor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBatchProcessor_Execute_Call) RunAndReturn(run func([]*Moveable) ([]*Moveable, bool)) *MockBatchProcessor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBatchProcessor creates a new instance of MockBatchProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBatchProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBatchProcessor {
	mock := &MockBatchProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
