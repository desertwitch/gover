// Code generated by mockery. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockPipeline is an autogenerated mock type for the Pipeline type
type MockPipeline[T any] struct {
	mock.Mock
}

type MockPipeline_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockPipeline[T]) EXPECT() *MockPipeline_Expecter[T] {
	return &MockPipeline_Expecter[T]{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *MockPipeline[T]) Add(_a0 Processor[T]) Pipeline[T] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 Pipeline[T]
	if rf, ok := ret.Get(0).(func(Processor[T]) Pipeline[T]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeline[T])
		}
	}

	return r0
}

// MockPipeline_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPipeline_Add_Call[T any] struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 Processor[T]
func (_e *MockPipeline_Expecter[T]) Add(_a0 interface{}) *MockPipeline_Add_Call[T] {
	return &MockPipeline_Add_Call[T]{Call: _e.mock.On("Add", _a0)}
}

func (_c *MockPipeline_Add_Call[T]) Run(run func(_a0 Processor[T])) *MockPipeline_Add_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Processor[T]))
	})
	return _c
}

func (_c *MockPipeline_Add_Call[T]) Return(_a0 Pipeline[T]) *MockPipeline_Add_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_Add_Call[T]) RunAndReturn(run func(Processor[T]) Pipeline[T]) *MockPipeline_Add_Call[T] {
	_c.Call.Return(run)
	return _c
}

// AddPostProcess provides a mock function with given fields: _a0
func (_m *MockPipeline[T]) AddPostProcess(_a0 BatchProcessor[T]) Pipeline[T] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddPostProcess")
	}

	var r0 Pipeline[T]
	if rf, ok := ret.Get(0).(func(BatchProcessor[T]) Pipeline[T]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeline[T])
		}
	}

	return r0
}

// MockPipeline_AddPostProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPostProcess'
type MockPipeline_AddPostProcess_Call[T any] struct {
	*mock.Call
}

// AddPostProcess is a helper method to define mock.On call
//   - _a0 BatchProcessor[T]
func (_e *MockPipeline_Expecter[T]) AddPostProcess(_a0 interface{}) *MockPipeline_AddPostProcess_Call[T] {
	return &MockPipeline_AddPostProcess_Call[T]{Call: _e.mock.On("AddPostProcess", _a0)}
}

func (_c *MockPipeline_AddPostProcess_Call[T]) Run(run func(_a0 BatchProcessor[T])) *MockPipeline_AddPostProcess_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BatchProcessor[T]))
	})
	return _c
}

func (_c *MockPipeline_AddPostProcess_Call[T]) Return(_a0 Pipeline[T]) *MockPipeline_AddPostProcess_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_AddPostProcess_Call[T]) RunAndReturn(run func(BatchProcessor[T]) Pipeline[T]) *MockPipeline_AddPostProcess_Call[T] {
	_c.Call.Return(run)
	return _c
}

// AddPreProcess provides a mock function with given fields: _a0
func (_m *MockPipeline[T]) AddPreProcess(_a0 BatchProcessor[T]) Pipeline[T] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddPreProcess")
	}

	var r0 Pipeline[T]
	if rf, ok := ret.Get(0).(func(BatchProcessor[T]) Pipeline[T]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeline[T])
		}
	}

	return r0
}

// MockPipeline_AddPreProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPreProcess'
type MockPipeline_AddPreProcess_Call[T any] struct {
	*mock.Call
}

// AddPreProcess is a helper method to define mock.On call
//   - _a0 BatchProcessor[T]
func (_e *MockPipeline_Expecter[T]) AddPreProcess(_a0 interface{}) *MockPipeline_AddPreProcess_Call[T] {
	return &MockPipeline_AddPreProcess_Call[T]{Call: _e.mock.On("AddPreProcess", _a0)}
}

func (_c *MockPipeline_AddPreProcess_Call[T]) Run(run func(_a0 BatchProcessor[T])) *MockPipeline_AddPreProcess_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BatchProcessor[T]))
	})
	return _c
}

func (_c *MockPipeline_AddPreProcess_Call[T]) Return(_a0 Pipeline[T]) *MockPipeline_AddPreProcess_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_AddPreProcess_Call[T]) RunAndReturn(run func(BatchProcessor[T]) Pipeline[T]) *MockPipeline_AddPreProcess_Call[T] {
	_c.Call.Return(run)
	return _c
}

// PostProcess provides a mock function with given fields: _a0
func (_m *MockPipeline[T]) PostProcess(_a0 []T) ([]T, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PostProcess")
	}

	var r0 []T
	var r1 bool
	if rf, ok := ret.Get(0).(func([]T) ([]T, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]T) []T); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func([]T) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPipeline_PostProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostProcess'
type MockPipeline_PostProcess_Call[T any] struct {
	*mock.Call
}

// PostProcess is a helper method to define mock.On call
//   - _a0 []T
func (_e *MockPipeline_Expecter[T]) PostProcess(_a0 interface{}) *MockPipeline_PostProcess_Call[T] {
	return &MockPipeline_PostProcess_Call[T]{Call: _e.mock.On("PostProcess", _a0)}
}

func (_c *MockPipeline_PostProcess_Call[T]) Run(run func(_a0 []T)) *MockPipeline_PostProcess_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *MockPipeline_PostProcess_Call[T]) Return(_a0 []T, _a1 bool) *MockPipeline_PostProcess_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipeline_PostProcess_Call[T]) RunAndReturn(run func([]T) ([]T, bool)) *MockPipeline_PostProcess_Call[T] {
	_c.Call.Return(run)
	return _c
}

// PreProcess provides a mock function with given fields: _a0
func (_m *MockPipeline[T]) PreProcess(_a0 []T) ([]T, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PreProcess")
	}

	var r0 []T
	var r1 bool
	if rf, ok := ret.Get(0).(func([]T) ([]T, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]T) []T); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func([]T) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPipeline_PreProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreProcess'
type MockPipeline_PreProcess_Call[T any] struct {
	*mock.Call
}

// PreProcess is a helper method to define mock.On call
//   - _a0 []T
func (_e *MockPipeline_Expecter[T]) PreProcess(_a0 interface{}) *MockPipeline_PreProcess_Call[T] {
	return &MockPipeline_PreProcess_Call[T]{Call: _e.mock.On("PreProcess", _a0)}
}

func (_c *MockPipeline_PreProcess_Call[T]) Run(run func(_a0 []T)) *MockPipeline_PreProcess_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *MockPipeline_PreProcess_Call[T]) Return(_a0 []T, _a1 bool) *MockPipeline_PreProcess_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipeline_PreProcess_Call[T]) RunAndReturn(run func([]T) ([]T, bool)) *MockPipeline_PreProcess_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: _a0
func (_m *MockPipeline[T]) Process(_a0 T) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(T) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPipeline_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockPipeline_Process_Call[T any] struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - _a0 T
func (_e *MockPipeline_Expecter[T]) Process(_a0 interface{}) *MockPipeline_Process_Call[T] {
	return &MockPipeline_Process_Call[T]{Call: _e.mock.On("Process", _a0)}
}

func (_c *MockPipeline_Process_Call[T]) Run(run func(_a0 T)) *MockPipeline_Process_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockPipeline_Process_Call[T]) Return(_a0 bool) *MockPipeline_Process_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_Process_Call[T]) RunAndReturn(run func(T) bool) *MockPipeline_Process_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockPipeline creates a new instance of MockPipeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPipeline[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPipeline[T] {
	mock := &MockPipeline[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
