// Code generated by mockery. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockPipeline is an autogenerated mock type for the Pipeline type
type MockPipeline struct {
	mock.Mock
}

type MockPipeline_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPipeline) EXPECT() *MockPipeline_Expecter {
	return &MockPipeline_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: pr
func (_m *MockPipeline) Add(pr Processor) Pipeline {
	ret := _m.Called(pr)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 Pipeline
	if rf, ok := ret.Get(0).(func(Processor) Pipeline); ok {
		r0 = rf(pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeline)
		}
	}

	return r0
}

// MockPipeline_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPipeline_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - pr Processor
func (_e *MockPipeline_Expecter) Add(pr interface{}) *MockPipeline_Add_Call {
	return &MockPipeline_Add_Call{Call: _e.mock.On("Add", pr)}
}

func (_c *MockPipeline_Add_Call) Run(run func(pr Processor)) *MockPipeline_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Processor))
	})
	return _c
}

func (_c *MockPipeline_Add_Call) Return(_a0 Pipeline) *MockPipeline_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_Add_Call) RunAndReturn(run func(Processor) Pipeline) *MockPipeline_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddPostProcess provides a mock function with given fields: bp
func (_m *MockPipeline) AddPostProcess(bp BatchProcessor) Pipeline {
	ret := _m.Called(bp)

	if len(ret) == 0 {
		panic("no return value specified for AddPostProcess")
	}

	var r0 Pipeline
	if rf, ok := ret.Get(0).(func(BatchProcessor) Pipeline); ok {
		r0 = rf(bp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeline)
		}
	}

	return r0
}

// MockPipeline_AddPostProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPostProcess'
type MockPipeline_AddPostProcess_Call struct {
	*mock.Call
}

// AddPostProcess is a helper method to define mock.On call
//   - bp BatchProcessor
func (_e *MockPipeline_Expecter) AddPostProcess(bp interface{}) *MockPipeline_AddPostProcess_Call {
	return &MockPipeline_AddPostProcess_Call{Call: _e.mock.On("AddPostProcess", bp)}
}

func (_c *MockPipeline_AddPostProcess_Call) Run(run func(bp BatchProcessor)) *MockPipeline_AddPostProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BatchProcessor))
	})
	return _c
}

func (_c *MockPipeline_AddPostProcess_Call) Return(_a0 Pipeline) *MockPipeline_AddPostProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_AddPostProcess_Call) RunAndReturn(run func(BatchProcessor) Pipeline) *MockPipeline_AddPostProcess_Call {
	_c.Call.Return(run)
	return _c
}

// AddPreProcess provides a mock function with given fields: bp
func (_m *MockPipeline) AddPreProcess(bp BatchProcessor) Pipeline {
	ret := _m.Called(bp)

	if len(ret) == 0 {
		panic("no return value specified for AddPreProcess")
	}

	var r0 Pipeline
	if rf, ok := ret.Get(0).(func(BatchProcessor) Pipeline); ok {
		r0 = rf(bp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pipeline)
		}
	}

	return r0
}

// MockPipeline_AddPreProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPreProcess'
type MockPipeline_AddPreProcess_Call struct {
	*mock.Call
}

// AddPreProcess is a helper method to define mock.On call
//   - bp BatchProcessor
func (_e *MockPipeline_Expecter) AddPreProcess(bp interface{}) *MockPipeline_AddPreProcess_Call {
	return &MockPipeline_AddPreProcess_Call{Call: _e.mock.On("AddPreProcess", bp)}
}

func (_c *MockPipeline_AddPreProcess_Call) Run(run func(bp BatchProcessor)) *MockPipeline_AddPreProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(BatchProcessor))
	})
	return _c
}

func (_c *MockPipeline_AddPreProcess_Call) Return(_a0 Pipeline) *MockPipeline_AddPreProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_AddPreProcess_Call) RunAndReturn(run func(BatchProcessor) Pipeline) *MockPipeline_AddPreProcess_Call {
	_c.Call.Return(run)
	return _c
}

// PostProcess provides a mock function with given fields: moveables
func (_m *MockPipeline) PostProcess(moveables []*Moveable) ([]*Moveable, bool) {
	ret := _m.Called(moveables)

	if len(ret) == 0 {
		panic("no return value specified for PostProcess")
	}

	var r0 []*Moveable
	var r1 bool
	if rf, ok := ret.Get(0).(func([]*Moveable) ([]*Moveable, bool)); ok {
		return rf(moveables)
	}
	if rf, ok := ret.Get(0).(func([]*Moveable) []*Moveable); ok {
		r0 = rf(moveables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Moveable)
		}
	}

	if rf, ok := ret.Get(1).(func([]*Moveable) bool); ok {
		r1 = rf(moveables)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPipeline_PostProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostProcess'
type MockPipeline_PostProcess_Call struct {
	*mock.Call
}

// PostProcess is a helper method to define mock.On call
//   - moveables []*Moveable
func (_e *MockPipeline_Expecter) PostProcess(moveables interface{}) *MockPipeline_PostProcess_Call {
	return &MockPipeline_PostProcess_Call{Call: _e.mock.On("PostProcess", moveables)}
}

func (_c *MockPipeline_PostProcess_Call) Run(run func(moveables []*Moveable)) *MockPipeline_PostProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*Moveable))
	})
	return _c
}

func (_c *MockPipeline_PostProcess_Call) Return(_a0 []*Moveable, _a1 bool) *MockPipeline_PostProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipeline_PostProcess_Call) RunAndReturn(run func([]*Moveable) ([]*Moveable, bool)) *MockPipeline_PostProcess_Call {
	_c.Call.Return(run)
	return _c
}

// PreProcess provides a mock function with given fields: moveables
func (_m *MockPipeline) PreProcess(moveables []*Moveable) ([]*Moveable, bool) {
	ret := _m.Called(moveables)

	if len(ret) == 0 {
		panic("no return value specified for PreProcess")
	}

	var r0 []*Moveable
	var r1 bool
	if rf, ok := ret.Get(0).(func([]*Moveable) ([]*Moveable, bool)); ok {
		return rf(moveables)
	}
	if rf, ok := ret.Get(0).(func([]*Moveable) []*Moveable); ok {
		r0 = rf(moveables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Moveable)
		}
	}

	if rf, ok := ret.Get(1).(func([]*Moveable) bool); ok {
		r1 = rf(moveables)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPipeline_PreProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreProcess'
type MockPipeline_PreProcess_Call struct {
	*mock.Call
}

// PreProcess is a helper method to define mock.On call
//   - moveables []*Moveable
func (_e *MockPipeline_Expecter) PreProcess(moveables interface{}) *MockPipeline_PreProcess_Call {
	return &MockPipeline_PreProcess_Call{Call: _e.mock.On("PreProcess", moveables)}
}

func (_c *MockPipeline_PreProcess_Call) Run(run func(moveables []*Moveable)) *MockPipeline_PreProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*Moveable))
	})
	return _c
}

func (_c *MockPipeline_PreProcess_Call) Return(_a0 []*Moveable, _a1 bool) *MockPipeline_PreProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPipeline_PreProcess_Call) RunAndReturn(run func([]*Moveable) ([]*Moveable, bool)) *MockPipeline_PreProcess_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: m
func (_m *MockPipeline) Process(m *Moveable) bool {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*Moveable) bool); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPipeline_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockPipeline_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - m *Moveable
func (_e *MockPipeline_Expecter) Process(m interface{}) *MockPipeline_Process_Call {
	return &MockPipeline_Process_Call{Call: _e.mock.On("Process", m)}
}

func (_c *MockPipeline_Process_Call) Run(run func(m *Moveable)) *MockPipeline_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Moveable))
	})
	return _c
}

func (_c *MockPipeline_Process_Call) Return(_a0 bool) *MockPipeline_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPipeline_Process_Call) RunAndReturn(run func(*Moveable) bool) *MockPipeline_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPipeline creates a new instance of MockPipeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPipeline(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPipeline {
	mock := &MockPipeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
