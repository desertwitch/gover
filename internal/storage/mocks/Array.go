// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	storage "github.com/desertwitch/gover/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// Array is an autogenerated mock type for the Array type
type Array struct {
	mock.Mock
}

type Array_Expecter struct {
	mock *mock.Mock
}

func (_m *Array) EXPECT() *Array_Expecter {
	return &Array_Expecter{mock: &_m.Mock}
}

// GetDisks provides a mock function with no fields
func (_m *Array) GetDisks() map[string]storage.Disk {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisks")
	}

	var r0 map[string]storage.Disk
	if rf, ok := ret.Get(0).(func() map[string]storage.Disk); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]storage.Disk)
		}
	}

	return r0
}

// Array_GetDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisks'
type Array_GetDisks_Call struct {
	*mock.Call
}

// GetDisks is a helper method to define mock.On call
func (_e *Array_Expecter) GetDisks() *Array_GetDisks_Call {
	return &Array_GetDisks_Call{Call: _e.mock.On("GetDisks")}
}

func (_c *Array_GetDisks_Call) Run(run func()) *Array_GetDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Array_GetDisks_Call) Return(_a0 map[string]storage.Disk) *Array_GetDisks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Array_GetDisks_Call) RunAndReturn(run func() map[string]storage.Disk) *Array_GetDisks_Call {
	_c.Call.Return(run)
	return _c
}

// NewArray creates a new instance of Array. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArray(t interface {
	mock.TestingT
	Cleanup(func())
}) *Array {
	mock := &Array{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
