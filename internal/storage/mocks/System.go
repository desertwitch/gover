// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	storage "github.com/desertwitch/gover/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// System is an autogenerated mock type for the System type
type System struct {
	mock.Mock
}

type System_Expecter struct {
	mock *mock.Mock
}

func (_m *System) EXPECT() *System_Expecter {
	return &System_Expecter{mock: &_m.Mock}
}

// GetArray provides a mock function with no fields
func (_m *System) GetArray() storage.Array {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArray")
	}

	var r0 storage.Array
	if rf, ok := ret.Get(0).(func() storage.Array); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Array)
		}
	}

	return r0
}

// System_GetArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArray'
type System_GetArray_Call struct {
	*mock.Call
}

// GetArray is a helper method to define mock.On call
func (_e *System_Expecter) GetArray() *System_GetArray_Call {
	return &System_GetArray_Call{Call: _e.mock.On("GetArray")}
}

func (_c *System_GetArray_Call) Run(run func()) *System_GetArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_GetArray_Call) Return(_a0 storage.Array) *System_GetArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *System_GetArray_Call) RunAndReturn(run func() storage.Array) *System_GetArray_Call {
	_c.Call.Return(run)
	return _c
}

// GetShares provides a mock function with no fields
func (_m *System) GetShares() map[string]storage.Share {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetShares")
	}

	var r0 map[string]storage.Share
	if rf, ok := ret.Get(0).(func() map[string]storage.Share); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]storage.Share)
		}
	}

	return r0
}

// System_GetShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShares'
type System_GetShares_Call struct {
	*mock.Call
}

// GetShares is a helper method to define mock.On call
func (_e *System_Expecter) GetShares() *System_GetShares_Call {
	return &System_GetShares_Call{Call: _e.mock.On("GetShares")}
}

func (_c *System_GetShares_Call) Run(run func()) *System_GetShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *System_GetShares_Call) Return(_a0 map[string]storage.Share) *System_GetShares_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *System_GetShares_Call) RunAndReturn(run func() map[string]storage.Share) *System_GetShares_Call {
	_c.Call.Return(run)
	return _c
}

// NewSystem creates a new instance of System. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *System {
	mock := &System{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
