// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueueProvider is an autogenerated mock type for the queueProvider type
type QueueProvider[T any] struct {
	mock.Mock
}

type QueueProvider_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *QueueProvider[T]) EXPECT() *QueueProvider_Expecter[T] {
	return &QueueProvider_Expecter[T]{mock: &_m.Mock}
}

// Dequeue provides a mock function with no fields
func (_m *QueueProvider[T]) Dequeue() (T, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 T
	var r1 bool
	if rf, ok := ret.Get(0).(func() (T, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// QueueProvider_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type QueueProvider_Dequeue_Call[T any] struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
func (_e *QueueProvider_Expecter[T]) Dequeue() *QueueProvider_Dequeue_Call[T] {
	return &QueueProvider_Dequeue_Call[T]{Call: _e.mock.On("Dequeue")}
}

func (_c *QueueProvider_Dequeue_Call[T]) Run(run func()) *QueueProvider_Dequeue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueueProvider_Dequeue_Call[T]) Return(_a0 T, _a1 bool) *QueueProvider_Dequeue_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueProvider_Dequeue_Call[T]) RunAndReturn(run func() (T, bool)) *QueueProvider_Dequeue_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: items
func (_m *QueueProvider[T]) Enqueue(items ...T) {
	_va := make([]interface{}, len(items))
	for _i := range items {
		_va[_i] = items[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// QueueProvider_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type QueueProvider_Enqueue_Call[T any] struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - items ...T
func (_e *QueueProvider_Expecter[T]) Enqueue(items ...interface{}) *QueueProvider_Enqueue_Call[T] {
	return &QueueProvider_Enqueue_Call[T]{Call: _e.mock.On("Enqueue",
		append([]interface{}{}, items...)...)}
}

func (_c *QueueProvider_Enqueue_Call[T]) Run(run func(items ...T)) *QueueProvider_Enqueue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *QueueProvider_Enqueue_Call[T]) Return() *QueueProvider_Enqueue_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *QueueProvider_Enqueue_Call[T]) RunAndReturn(run func(...T)) *QueueProvider_Enqueue_Call[T] {
	_c.Run(run)
	return _c
}

// HasRemainingItems provides a mock function with no fields
func (_m *QueueProvider[T]) HasRemainingItems() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasRemainingItems")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// QueueProvider_HasRemainingItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRemainingItems'
type QueueProvider_HasRemainingItems_Call[T any] struct {
	*mock.Call
}

// HasRemainingItems is a helper method to define mock.On call
func (_e *QueueProvider_Expecter[T]) HasRemainingItems() *QueueProvider_HasRemainingItems_Call[T] {
	return &QueueProvider_HasRemainingItems_Call[T]{Call: _e.mock.On("HasRemainingItems")}
}

func (_c *QueueProvider_HasRemainingItems_Call[T]) Run(run func()) *QueueProvider_HasRemainingItems_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueueProvider_HasRemainingItems_Call[T]) Return(_a0 bool) *QueueProvider_HasRemainingItems_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueueProvider_HasRemainingItems_Call[T]) RunAndReturn(run func() bool) *QueueProvider_HasRemainingItems_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ResetQueue provides a mock function with no fields
func (_m *QueueProvider[T]) ResetQueue() {
	_m.Called()
}

// QueueProvider_ResetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetQueue'
type QueueProvider_ResetQueue_Call[T any] struct {
	*mock.Call
}

// ResetQueue is a helper method to define mock.On call
func (_e *QueueProvider_Expecter[T]) ResetQueue() *QueueProvider_ResetQueue_Call[T] {
	return &QueueProvider_ResetQueue_Call[T]{Call: _e.mock.On("ResetQueue")}
}

func (_c *QueueProvider_ResetQueue_Call[T]) Run(run func()) *QueueProvider_ResetQueue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueueProvider_ResetQueue_Call[T]) Return() *QueueProvider_ResetQueue_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *QueueProvider_ResetQueue_Call[T]) RunAndReturn(run func()) *QueueProvider_ResetQueue_Call[T] {
	_c.Run(run)
	return _c
}

// SetProcessing provides a mock function with given fields: items
func (_m *QueueProvider[T]) SetProcessing(items ...T) {
	_va := make([]interface{}, len(items))
	for _i := range items {
		_va[_i] = items[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// QueueProvider_SetProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProcessing'
type QueueProvider_SetProcessing_Call[T any] struct {
	*mock.Call
}

// SetProcessing is a helper method to define mock.On call
//   - items ...T
func (_e *QueueProvider_Expecter[T]) SetProcessing(items ...interface{}) *QueueProvider_SetProcessing_Call[T] {
	return &QueueProvider_SetProcessing_Call[T]{Call: _e.mock.On("SetProcessing",
		append([]interface{}{}, items...)...)}
}

func (_c *QueueProvider_SetProcessing_Call[T]) Run(run func(items ...T)) *QueueProvider_SetProcessing_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *QueueProvider_SetProcessing_Call[T]) Return() *QueueProvider_SetProcessing_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *QueueProvider_SetProcessing_Call[T]) RunAndReturn(run func(...T)) *QueueProvider_SetProcessing_Call[T] {
	_c.Run(run)
	return _c
}

// SetSkipped provides a mock function with given fields: items
func (_m *QueueProvider[T]) SetSkipped(items ...T) {
	_va := make([]interface{}, len(items))
	for _i := range items {
		_va[_i] = items[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// QueueProvider_SetSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSkipped'
type QueueProvider_SetSkipped_Call[T any] struct {
	*mock.Call
}

// SetSkipped is a helper method to define mock.On call
//   - items ...T
func (_e *QueueProvider_Expecter[T]) SetSkipped(items ...interface{}) *QueueProvider_SetSkipped_Call[T] {
	return &QueueProvider_SetSkipped_Call[T]{Call: _e.mock.On("SetSkipped",
		append([]interface{}{}, items...)...)}
}

func (_c *QueueProvider_SetSkipped_Call[T]) Run(run func(items ...T)) *QueueProvider_SetSkipped_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *QueueProvider_SetSkipped_Call[T]) Return() *QueueProvider_SetSkipped_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *QueueProvider_SetSkipped_Call[T]) RunAndReturn(run func(...T)) *QueueProvider_SetSkipped_Call[T] {
	_c.Run(run)
	return _c
}

// SetSuccess provides a mock function with given fields: items
func (_m *QueueProvider[T]) SetSuccess(items ...T) {
	_va := make([]interface{}, len(items))
	for _i := range items {
		_va[_i] = items[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// QueueProvider_SetSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSuccess'
type QueueProvider_SetSuccess_Call[T any] struct {
	*mock.Call
}

// SetSuccess is a helper method to define mock.On call
//   - items ...T
func (_e *QueueProvider_Expecter[T]) SetSuccess(items ...interface{}) *QueueProvider_SetSuccess_Call[T] {
	return &QueueProvider_SetSuccess_Call[T]{Call: _e.mock.On("SetSuccess",
		append([]interface{}{}, items...)...)}
}

func (_c *QueueProvider_SetSuccess_Call[T]) Run(run func(items ...T)) *QueueProvider_SetSuccess_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]T, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(T)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *QueueProvider_SetSuccess_Call[T]) Return() *QueueProvider_SetSuccess_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *QueueProvider_SetSuccess_Call[T]) RunAndReturn(run func(...T)) *QueueProvider_SetSuccess_Call[T] {
	_c.Run(run)
	return _c
}

// NewQueueProvider creates a new instance of QueueProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueProvider[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueProvider[T] {
	mock := &QueueProvider[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
