// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	schema "github.com/desertwitch/gover/internal/generic/schema"
	mock "github.com/stretchr/testify/mock"
)

// Share is an autogenerated mock type for the Share type
type Share struct {
	mock.Mock
}

type Share_Expecter struct {
	mock *mock.Mock
}

func (_m *Share) EXPECT() *Share_Expecter {
	return &Share_Expecter{mock: &_m.Mock}
}

// GetAllocator provides a mock function with no fields
func (_m *Share) GetAllocator() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllocator")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Share_GetAllocator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllocator'
type Share_GetAllocator_Call struct {
	*mock.Call
}

// GetAllocator is a helper method to define mock.On call
func (_e *Share_Expecter) GetAllocator() *Share_GetAllocator_Call {
	return &Share_GetAllocator_Call{Call: _e.mock.On("GetAllocator")}
}

func (_c *Share_GetAllocator_Call) Run(run func()) *Share_GetAllocator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetAllocator_Call) Return(_a0 string) *Share_GetAllocator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetAllocator_Call) RunAndReturn(run func() string) *Share_GetAllocator_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachePool provides a mock function with no fields
func (_m *Share) GetCachePool() schema.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCachePool")
	}

	var r0 schema.Pool
	if rf, ok := ret.Get(0).(func() schema.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.Pool)
		}
	}

	return r0
}

// Share_GetCachePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachePool'
type Share_GetCachePool_Call struct {
	*mock.Call
}

// GetCachePool is a helper method to define mock.On call
func (_e *Share_Expecter) GetCachePool() *Share_GetCachePool_Call {
	return &Share_GetCachePool_Call{Call: _e.mock.On("GetCachePool")}
}

func (_c *Share_GetCachePool_Call) Run(run func()) *Share_GetCachePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetCachePool_Call) Return(_a0 schema.Pool) *Share_GetCachePool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetCachePool_Call) RunAndReturn(run func() schema.Pool) *Share_GetCachePool_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachePool2 provides a mock function with no fields
func (_m *Share) GetCachePool2() schema.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCachePool2")
	}

	var r0 schema.Pool
	if rf, ok := ret.Get(0).(func() schema.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schema.Pool)
		}
	}

	return r0
}

// Share_GetCachePool2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachePool2'
type Share_GetCachePool2_Call struct {
	*mock.Call
}

// GetCachePool2 is a helper method to define mock.On call
func (_e *Share_Expecter) GetCachePool2() *Share_GetCachePool2_Call {
	return &Share_GetCachePool2_Call{Call: _e.mock.On("GetCachePool2")}
}

func (_c *Share_GetCachePool2_Call) Run(run func()) *Share_GetCachePool2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetCachePool2_Call) Return(_a0 schema.Pool) *Share_GetCachePool2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetCachePool2_Call) RunAndReturn(run func() schema.Pool) *Share_GetCachePool2_Call {
	_c.Call.Return(run)
	return _c
}

// GetDisableCOW provides a mock function with no fields
func (_m *Share) GetDisableCOW() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDisableCOW")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Share_GetDisableCOW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDisableCOW'
type Share_GetDisableCOW_Call struct {
	*mock.Call
}

// GetDisableCOW is a helper method to define mock.On call
func (_e *Share_Expecter) GetDisableCOW() *Share_GetDisableCOW_Call {
	return &Share_GetDisableCOW_Call{Call: _e.mock.On("GetDisableCOW")}
}

func (_c *Share_GetDisableCOW_Call) Run(run func()) *Share_GetDisableCOW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetDisableCOW_Call) Return(_a0 bool) *Share_GetDisableCOW_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetDisableCOW_Call) RunAndReturn(run func() bool) *Share_GetDisableCOW_Call {
	_c.Call.Return(run)
	return _c
}

// GetIncludedDisks provides a mock function with no fields
func (_m *Share) GetIncludedDisks() map[string]schema.Disk {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIncludedDisks")
	}

	var r0 map[string]schema.Disk
	if rf, ok := ret.Get(0).(func() map[string]schema.Disk); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]schema.Disk)
		}
	}

	return r0
}

// Share_GetIncludedDisks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIncludedDisks'
type Share_GetIncludedDisks_Call struct {
	*mock.Call
}

// GetIncludedDisks is a helper method to define mock.On call
func (_e *Share_Expecter) GetIncludedDisks() *Share_GetIncludedDisks_Call {
	return &Share_GetIncludedDisks_Call{Call: _e.mock.On("GetIncludedDisks")}
}

func (_c *Share_GetIncludedDisks_Call) Run(run func()) *Share_GetIncludedDisks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetIncludedDisks_Call) Return(_a0 map[string]schema.Disk) *Share_GetIncludedDisks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetIncludedDisks_Call) RunAndReturn(run func() map[string]schema.Disk) *Share_GetIncludedDisks_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *Share) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Share_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Share_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Share_Expecter) GetName() *Share_GetName_Call {
	return &Share_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Share_GetName_Call) Run(run func()) *Share_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetName_Call) Return(_a0 string) *Share_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetName_Call) RunAndReturn(run func() string) *Share_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpaceFloor provides a mock function with no fields
func (_m *Share) GetSpaceFloor() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpaceFloor")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Share_GetSpaceFloor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpaceFloor'
type Share_GetSpaceFloor_Call struct {
	*mock.Call
}

// GetSpaceFloor is a helper method to define mock.On call
func (_e *Share_Expecter) GetSpaceFloor() *Share_GetSpaceFloor_Call {
	return &Share_GetSpaceFloor_Call{Call: _e.mock.On("GetSpaceFloor")}
}

func (_c *Share_GetSpaceFloor_Call) Run(run func()) *Share_GetSpaceFloor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetSpaceFloor_Call) Return(_a0 uint64) *Share_GetSpaceFloor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetSpaceFloor_Call) RunAndReturn(run func() uint64) *Share_GetSpaceFloor_Call {
	_c.Call.Return(run)
	return _c
}

// GetSplitLevel provides a mock function with no fields
func (_m *Share) GetSplitLevel() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSplitLevel")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Share_GetSplitLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSplitLevel'
type Share_GetSplitLevel_Call struct {
	*mock.Call
}

// GetSplitLevel is a helper method to define mock.On call
func (_e *Share_Expecter) GetSplitLevel() *Share_GetSplitLevel_Call {
	return &Share_GetSplitLevel_Call{Call: _e.mock.On("GetSplitLevel")}
}

func (_c *Share_GetSplitLevel_Call) Run(run func()) *Share_GetSplitLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetSplitLevel_Call) Return(_a0 int) *Share_GetSplitLevel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetSplitLevel_Call) RunAndReturn(run func() int) *Share_GetSplitLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetUseCache provides a mock function with no fields
func (_m *Share) GetUseCache() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUseCache")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Share_GetUseCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUseCache'
type Share_GetUseCache_Call struct {
	*mock.Call
}

// GetUseCache is a helper method to define mock.On call
func (_e *Share_Expecter) GetUseCache() *Share_GetUseCache_Call {
	return &Share_GetUseCache_Call{Call: _e.mock.On("GetUseCache")}
}

func (_c *Share_GetUseCache_Call) Run(run func()) *Share_GetUseCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Share_GetUseCache_Call) Return(_a0 string) *Share_GetUseCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Share_GetUseCache_Call) RunAndReturn(run func() string) *Share_GetUseCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewShare creates a new instance of Share. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShare(t interface {
	mock.TestingT
	Cleanup(func())
}) *Share {
	mock := &Share{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
