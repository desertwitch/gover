// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/desertwitch/gover/internal/generic/schema"
)

// IoTargetQueue is an autogenerated mock type for the ioTargetQueue type
type IoTargetQueue struct {
	mock.Mock
}

type IoTargetQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *IoTargetQueue) EXPECT() *IoTargetQueue_Expecter {
	return &IoTargetQueue_Expecter{mock: &_m.Mock}
}

// AddBytesTransfered provides a mock function with given fields: bytes
func (_m *IoTargetQueue) AddBytesTransfered(bytes uint64) {
	_m.Called(bytes)
}

// IoTargetQueue_AddBytesTransfered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBytesTransfered'
type IoTargetQueue_AddBytesTransfered_Call struct {
	*mock.Call
}

// AddBytesTransfered is a helper method to define mock.On call
//   - bytes uint64
func (_e *IoTargetQueue_Expecter) AddBytesTransfered(bytes interface{}) *IoTargetQueue_AddBytesTransfered_Call {
	return &IoTargetQueue_AddBytesTransfered_Call{Call: _e.mock.On("AddBytesTransfered", bytes)}
}

func (_c *IoTargetQueue_AddBytesTransfered_Call) Run(run func(bytes uint64)) *IoTargetQueue_AddBytesTransfered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *IoTargetQueue_AddBytesTransfered_Call) Return() *IoTargetQueue_AddBytesTransfered_Call {
	_c.Call.Return()
	return _c
}

func (_c *IoTargetQueue_AddBytesTransfered_Call) RunAndReturn(run func(uint64)) *IoTargetQueue_AddBytesTransfered_Call {
	_c.Run(run)
	return _c
}

// DequeueAndProcess provides a mock function with given fields: ctx, processFunc
func (_m *IoTargetQueue) DequeueAndProcess(ctx context.Context, processFunc func(*schema.Moveable) int) error {
	ret := _m.Called(ctx, processFunc)

	if len(ret) == 0 {
		panic("no return value specified for DequeueAndProcess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*schema.Moveable) int) error); ok {
		r0 = rf(ctx, processFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IoTargetQueue_DequeueAndProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DequeueAndProcess'
type IoTargetQueue_DequeueAndProcess_Call struct {
	*mock.Call
}

// DequeueAndProcess is a helper method to define mock.On call
//   - ctx context.Context
//   - processFunc func(*schema.Moveable) int
func (_e *IoTargetQueue_Expecter) DequeueAndProcess(ctx interface{}, processFunc interface{}) *IoTargetQueue_DequeueAndProcess_Call {
	return &IoTargetQueue_DequeueAndProcess_Call{Call: _e.mock.On("DequeueAndProcess", ctx, processFunc)}
}

func (_c *IoTargetQueue_DequeueAndProcess_Call) Run(run func(ctx context.Context, processFunc func(*schema.Moveable) int)) *IoTargetQueue_DequeueAndProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(*schema.Moveable) int))
	})
	return _c
}

func (_c *IoTargetQueue_DequeueAndProcess_Call) Return(_a0 error) *IoTargetQueue_DequeueAndProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IoTargetQueue_DequeueAndProcess_Call) RunAndReturn(run func(context.Context, func(*schema.Moveable) int) error) *IoTargetQueue_DequeueAndProcess_Call {
	_c.Call.Return(run)
	return _c
}

// NewIoTargetQueue creates a new instance of IoTargetQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIoTargetQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *IoTargetQueue {
	mock := &IoTargetQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
