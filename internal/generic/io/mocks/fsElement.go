// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	schema "github.com/desertwitch/gover/internal/generic/schema"
	mock "github.com/stretchr/testify/mock"
)

// FsElement is an autogenerated mock type for the fsElement type
type FsElement struct {
	mock.Mock
}

type FsElement_Expecter struct {
	mock *mock.Mock
}

func (_m *FsElement) EXPECT() *FsElement_Expecter {
	return &FsElement_Expecter{mock: &_m.Mock}
}

// GetDestPath provides a mock function with no fields
func (_m *FsElement) GetDestPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDestPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FsElement_GetDestPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestPath'
type FsElement_GetDestPath_Call struct {
	*mock.Call
}

// GetDestPath is a helper method to define mock.On call
func (_e *FsElement_Expecter) GetDestPath() *FsElement_GetDestPath_Call {
	return &FsElement_GetDestPath_Call{Call: _e.mock.On("GetDestPath")}
}

func (_c *FsElement_GetDestPath_Call) Run(run func()) *FsElement_GetDestPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FsElement_GetDestPath_Call) Return(_a0 string) *FsElement_GetDestPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FsElement_GetDestPath_Call) RunAndReturn(run func() string) *FsElement_GetDestPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with no fields
func (_m *FsElement) GetMetadata() *schema.Metadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *schema.Metadata
	if rf, ok := ret.Get(0).(func() *schema.Metadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.Metadata)
		}
	}

	return r0
}

// FsElement_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type FsElement_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
func (_e *FsElement_Expecter) GetMetadata() *FsElement_GetMetadata_Call {
	return &FsElement_GetMetadata_Call{Call: _e.mock.On("GetMetadata")}
}

func (_c *FsElement_GetMetadata_Call) Run(run func()) *FsElement_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FsElement_GetMetadata_Call) Return(_a0 *schema.Metadata) *FsElement_GetMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FsElement_GetMetadata_Call) RunAndReturn(run func() *schema.Metadata) *FsElement_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourcePath provides a mock function with no fields
func (_m *FsElement) GetSourcePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourcePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FsElement_GetSourcePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourcePath'
type FsElement_GetSourcePath_Call struct {
	*mock.Call
}

// GetSourcePath is a helper method to define mock.On call
func (_e *FsElement_Expecter) GetSourcePath() *FsElement_GetSourcePath_Call {
	return &FsElement_GetSourcePath_Call{Call: _e.mock.On("GetSourcePath")}
}

func (_c *FsElement_GetSourcePath_Call) Run(run func()) *FsElement_GetSourcePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FsElement_GetSourcePath_Call) Return(_a0 string) *FsElement_GetSourcePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FsElement_GetSourcePath_Call) RunAndReturn(run func() string) *FsElement_GetSourcePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewFsElement creates a new instance of FsElement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFsElement(t interface {
	mock.TestingT
	Cleanup(func())
}) *FsElement {
	mock := &FsElement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
