// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	schema "github.com/desertwitch/gover/internal/generic/schema"
	mock "github.com/stretchr/testify/mock"
)

// EnumerationQueue is an autogenerated mock type for the enumerationQueue type
type EnumerationQueue struct {
	mock.Mock
}

type EnumerationQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *EnumerationQueue) EXPECT() *EnumerationQueue_Expecter {
	return &EnumerationQueue_Expecter{mock: &_m.Mock}
}

// DequeueAndProcessConc provides a mock function with given fields: ctx, maxWorkers, processFunc, resetQueueAfter
func (_m *EnumerationQueue) DequeueAndProcessConc(ctx context.Context, maxWorkers int, processFunc func(*schema.Moveable) bool, resetQueueAfter bool) error {
	ret := _m.Called(ctx, maxWorkers, processFunc, resetQueueAfter)

	if len(ret) == 0 {
		panic("no return value specified for DequeueAndProcessConc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(*schema.Moveable) bool, bool) error); ok {
		r0 = rf(ctx, maxWorkers, processFunc, resetQueueAfter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnumerationQueue_DequeueAndProcessConc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DequeueAndProcessConc'
type EnumerationQueue_DequeueAndProcessConc_Call struct {
	*mock.Call
}

// DequeueAndProcessConc is a helper method to define mock.On call
//   - ctx context.Context
//   - maxWorkers int
//   - processFunc func(*schema.Moveable) bool
//   - resetQueueAfter bool
func (_e *EnumerationQueue_Expecter) DequeueAndProcessConc(ctx interface{}, maxWorkers interface{}, processFunc interface{}, resetQueueAfter interface{}) *EnumerationQueue_DequeueAndProcessConc_Call {
	return &EnumerationQueue_DequeueAndProcessConc_Call{Call: _e.mock.On("DequeueAndProcessConc", ctx, maxWorkers, processFunc, resetQueueAfter)}
}

func (_c *EnumerationQueue_DequeueAndProcessConc_Call) Run(run func(ctx context.Context, maxWorkers int, processFunc func(*schema.Moveable) bool, resetQueueAfter bool)) *EnumerationQueue_DequeueAndProcessConc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(func(*schema.Moveable) bool), args[3].(bool))
	})
	return _c
}

func (_c *EnumerationQueue_DequeueAndProcessConc_Call) Return(_a0 error) *EnumerationQueue_DequeueAndProcessConc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnumerationQueue_DequeueAndProcessConc_Call) RunAndReturn(run func(context.Context, int, func(*schema.Moveable) bool, bool) error) *EnumerationQueue_DequeueAndProcessConc_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnumerationQueue creates a new instance of EnumerationQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnumerationQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnumerationQueue {
	mock := &EnumerationQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
