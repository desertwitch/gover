// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// OsProvider is an autogenerated mock type for the osProvider type
type OsProvider struct {
	mock.Mock
}

type OsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *OsProvider) EXPECT() *OsProvider_Expecter {
	return &OsProvider_Expecter{mock: &_m.Mock}
}

// Open provides a mock function with given fields: name
func (_m *OsProvider) Open(name string) (*os.File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*os.File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *os.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OsProvider_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type OsProvider_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *OsProvider_Expecter) Open(name interface{}) *OsProvider_Open_Call {
	return &OsProvider_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *OsProvider_Open_Call) Run(run func(name string)) *OsProvider_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OsProvider_Open_Call) Return(_a0 *os.File, _a1 error) *OsProvider_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OsProvider_Open_Call) RunAndReturn(run func(string) (*os.File, error)) *OsProvider_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function with given fields: name, flag, perm
func (_m *OsProvider) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	ret := _m.Called(name, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, os.FileMode) (*os.File, error)); ok {
		return rf(name, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, os.FileMode) *os.File); ok {
		r0 = rf(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, os.FileMode) error); ok {
		r1 = rf(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OsProvider_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type OsProvider_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - name string
//   - flag int
//   - perm os.FileMode
func (_e *OsProvider_Expecter) OpenFile(name interface{}, flag interface{}, perm interface{}) *OsProvider_OpenFile_Call {
	return &OsProvider_OpenFile_Call{Call: _e.mock.On("OpenFile", name, flag, perm)}
}

func (_c *OsProvider_OpenFile_Call) Run(run func(name string, flag int, perm os.FileMode)) *OsProvider_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(os.FileMode))
	})
	return _c
}

func (_c *OsProvider_OpenFile_Call) Return(_a0 *os.File, _a1 error) *OsProvider_OpenFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OsProvider_OpenFile_Call) RunAndReturn(run func(string, int, os.FileMode) (*os.File, error)) *OsProvider_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *OsProvider) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OsProvider_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type OsProvider_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *OsProvider_Expecter) Remove(name interface{}) *OsProvider_Remove_Call {
	return &OsProvider_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *OsProvider_Remove_Call) Run(run func(name string)) *OsProvider_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OsProvider_Remove_Call) Return(_a0 error) *OsProvider_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OsProvider_Remove_Call) RunAndReturn(run func(string) error) *OsProvider_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function with given fields: oldpath, newpath
func (_m *OsProvider) Rename(oldpath string, newpath string) error {
	ret := _m.Called(oldpath, newpath)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldpath, newpath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OsProvider_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type OsProvider_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - oldpath string
//   - newpath string
func (_e *OsProvider_Expecter) Rename(oldpath interface{}, newpath interface{}) *OsProvider_Rename_Call {
	return &OsProvider_Rename_Call{Call: _e.mock.On("Rename", oldpath, newpath)}
}

func (_c *OsProvider_Rename_Call) Run(run func(oldpath string, newpath string)) *OsProvider_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OsProvider_Rename_Call) Return(_a0 error) *OsProvider_Rename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OsProvider_Rename_Call) RunAndReturn(run func(string, string) error) *OsProvider_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: name
func (_m *OsProvider) Stat(name string) (os.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 os.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (os.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) os.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OsProvider_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type OsProvider_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - name string
func (_e *OsProvider_Expecter) Stat(name interface{}) *OsProvider_Stat_Call {
	return &OsProvider_Stat_Call{Call: _e.mock.On("Stat", name)}
}

func (_c *OsProvider_Stat_Call) Run(run func(name string)) *OsProvider_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OsProvider_Stat_Call) Return(_a0 os.FileInfo, _a1 error) *OsProvider_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OsProvider_Stat_Call) RunAndReturn(run func(string) (os.FileInfo, error)) *OsProvider_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewOsProvider creates a new instance of OsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *OsProvider {
	mock := &OsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
