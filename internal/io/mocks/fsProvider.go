// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	filesystem "github.com/desertwitch/gover/internal/filesystem"

	mock "github.com/stretchr/testify/mock"
)

// FsProvider is an autogenerated mock type for the fsProvider type
type FsProvider struct {
	mock.Mock
}

type FsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FsProvider) EXPECT() *FsProvider_Expecter {
	return &FsProvider_Expecter{mock: &_m.Mock}
}

// HasEnoughFreeSpace provides a mock function with given fields: s, minFree, fileSize
func (_m *FsProvider) HasEnoughFreeSpace(s filesystem.StorageType, minFree uint64, fileSize uint64) (bool, error) {
	ret := _m.Called(s, minFree, fileSize)

	if len(ret) == 0 {
		panic("no return value specified for HasEnoughFreeSpace")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(filesystem.StorageType, uint64, uint64) (bool, error)); ok {
		return rf(s, minFree, fileSize)
	}
	if rf, ok := ret.Get(0).(func(filesystem.StorageType, uint64, uint64) bool); ok {
		r0 = rf(s, minFree, fileSize)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(filesystem.StorageType, uint64, uint64) error); ok {
		r1 = rf(s, minFree, fileSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FsProvider_HasEnoughFreeSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasEnoughFreeSpace'
type FsProvider_HasEnoughFreeSpace_Call struct {
	*mock.Call
}

// HasEnoughFreeSpace is a helper method to define mock.On call
//   - s filesystem.StorageType
//   - minFree uint64
//   - fileSize uint64
func (_e *FsProvider_Expecter) HasEnoughFreeSpace(s interface{}, minFree interface{}, fileSize interface{}) *FsProvider_HasEnoughFreeSpace_Call {
	return &FsProvider_HasEnoughFreeSpace_Call{Call: _e.mock.On("HasEnoughFreeSpace", s, minFree, fileSize)}
}

func (_c *FsProvider_HasEnoughFreeSpace_Call) Run(run func(s filesystem.StorageType, minFree uint64, fileSize uint64)) *FsProvider_HasEnoughFreeSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filesystem.StorageType), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *FsProvider_HasEnoughFreeSpace_Call) Return(_a0 bool, _a1 error) *FsProvider_HasEnoughFreeSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FsProvider_HasEnoughFreeSpace_Call) RunAndReturn(run func(filesystem.StorageType, uint64, uint64) (bool, error)) *FsProvider_HasEnoughFreeSpace_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmptyFolder provides a mock function with given fields: path
func (_m *FsProvider) IsEmptyFolder(path string) (bool, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsEmptyFolder")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FsProvider_IsEmptyFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmptyFolder'
type FsProvider_IsEmptyFolder_Call struct {
	*mock.Call
}

// IsEmptyFolder is a helper method to define mock.On call
//   - path string
func (_e *FsProvider_Expecter) IsEmptyFolder(path interface{}) *FsProvider_IsEmptyFolder_Call {
	return &FsProvider_IsEmptyFolder_Call{Call: _e.mock.On("IsEmptyFolder", path)}
}

func (_c *FsProvider_IsEmptyFolder_Call) Run(run func(path string)) *FsProvider_IsEmptyFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FsProvider_IsEmptyFolder_Call) Return(_a0 bool, _a1 error) *FsProvider_IsEmptyFolder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FsProvider_IsEmptyFolder_Call) RunAndReturn(run func(string) (bool, error)) *FsProvider_IsEmptyFolder_Call {
	_c.Call.Return(run)
	return _c
}

// IsFileInUse provides a mock function with given fields: path
func (_m *FsProvider) IsFileInUse(path string) (bool, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsFileInUse")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FsProvider_IsFileInUse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFileInUse'
type FsProvider_IsFileInUse_Call struct {
	*mock.Call
}

// IsFileInUse is a helper method to define mock.On call
//   - path string
func (_e *FsProvider_Expecter) IsFileInUse(path interface{}) *FsProvider_IsFileInUse_Call {
	return &FsProvider_IsFileInUse_Call{Call: _e.mock.On("IsFileInUse", path)}
}

func (_c *FsProvider_IsFileInUse_Call) Run(run func(path string)) *FsProvider_IsFileInUse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FsProvider_IsFileInUse_Call) Return(_a0 bool, _a1 error) *FsProvider_IsFileInUse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FsProvider_IsFileInUse_Call) RunAndReturn(run func(string) (bool, error)) *FsProvider_IsFileInUse_Call {
	_c.Call.Return(run)
	return _c
}

// NewFsProvider creates a new instance of FsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FsProvider {
	mock := &FsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
