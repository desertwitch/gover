// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	schema "github.com/desertwitch/gover/internal/schema"
)

// FsProvider is an autogenerated mock type for the fsProvider type
type FsProvider struct {
	mock.Mock
}

type FsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FsProvider) EXPECT() *FsProvider_Expecter {
	return &FsProvider_Expecter{mock: &_m.Mock}
}

// ExistsOnStorage provides a mock function with given fields: m
func (_m *FsProvider) ExistsOnStorage(m *schema.Moveable) (string, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for ExistsOnStorage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*schema.Moveable) (string, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(*schema.Moveable) string); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*schema.Moveable) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FsProvider_ExistsOnStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsOnStorage'
type FsProvider_ExistsOnStorage_Call struct {
	*mock.Call
}

// ExistsOnStorage is a helper method to define mock.On call
//   - m *schema.Moveable
func (_e *FsProvider_Expecter) ExistsOnStorage(m interface{}) *FsProvider_ExistsOnStorage_Call {
	return &FsProvider_ExistsOnStorage_Call{Call: _e.mock.On("ExistsOnStorage", m)}
}

func (_c *FsProvider_ExistsOnStorage_Call) Run(run func(m *schema.Moveable)) *FsProvider_ExistsOnStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*schema.Moveable))
	})
	return _c
}

func (_c *FsProvider_ExistsOnStorage_Call) Return(_a0 string, _a1 error) *FsProvider_ExistsOnStorage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FsProvider_ExistsOnStorage_Call) RunAndReturn(run func(*schema.Moveable) (string, error)) *FsProvider_ExistsOnStorage_Call {
	_c.Call.Return(run)
	return _c
}

// NewFsProvider creates a new instance of FsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FsProvider {
	mock := &FsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
